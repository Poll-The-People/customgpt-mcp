#!/usr/bin/env python3
"""
Setup script for CustomGPT MCP Server
Automates the installation and configuration process.
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def print_header():
    """Print welcome header."""
    print("🤖 CustomGPT MCP Server Setup")
    print("=" * 50)
    print("Setting up your CustomGPT MCP Server for production deployment.")
    print()

def check_python_version():
    """Check if Python version is compatible."""
    if sys.version_info < (3, 8):
        print("❌ Error: Python 3.8 or higher is required")
        print(f"Current version: {sys.version}")
        sys.exit(1)
    print(f"✅ Python version: {sys.version.split()[0]}")

def check_dependencies():
    """Check if required system dependencies are available."""
    dependencies = {
        "git": "Git is required for deployment",
        "pip": "Pip is required for Python package installation"
    }

    for cmd, description in dependencies.items():
        if not shutil.which(cmd):
            print(f"❌ {cmd} not found: {description}")
            return False
        print(f"✅ {cmd} available")

    return True

def setup_virtual_environment():
    """Create and activate virtual environment."""
    venv_path = Path("venv")

    if venv_path.exists():
        print("📁 Virtual environment already exists")
        return True

    try:
        print("🔨 Creating virtual environment...")
        subprocess.run([sys.executable, "-m", "venv", "venv"], check=True)
        print("✅ Virtual environment created")
        return True
    except subprocess.CalledProcessError as e:
        print(f"❌ Failed to create virtual environment: {e}")
        return False

def install_dependencies():
    """Install Python dependencies."""
    venv_python = get_venv_python()

    if not venv_python:
        print("❌ Virtual environment not found")
        return False

    try:
        print("📦 Installing dependencies...")
        subprocess.run([venv_python, "-m", "pip", "install", "--upgrade", "pip"], check=True)
        subprocess.run([venv_python, "-m", "pip", "install", "-r", "requirements.txt"], check=True)
        print("✅ Dependencies installed")
        return True
    except subprocess.CalledProcessError as e:
        print(f"❌ Failed to install dependencies: {e}")
        return False

def get_venv_python():
    """Get path to virtual environment Python."""
    if os.name == 'nt':  # Windows
        return Path("venv/Scripts/python.exe")
    else:  # Unix-like
        return Path("venv/bin/python")

def create_env_file():
    """Create .env file with user configuration."""
    env_path = Path(".env")

    if env_path.exists():
        print("📄 .env file already exists")
        overwrite = input("Do you want to overwrite it? (y/N): ").lower().strip()
        if overwrite != 'y':
            return True

    print("\n🔧 Configuration Setup")
    print("-" * 30)

    # Get CustomGPT API base URL
    api_base = input("CustomGPT API Base URL [https://app.customgpt.ai]: ").strip()
    if not api_base:
        api_base = "https://app.customgpt.ai"

    # Get server settings
    host = input("Server Host [0.0.0.0]: ").strip()
    if not host:
        host = "0.0.0.0"

    port = input("Server Port [8000]: ").strip()
    if not port:
        port = "8000"

    # Get debug mode
    debug = input("Enable Debug Mode? (y/N): ").lower().strip()
    debug = "true" if debug == 'y' else "false"

    # Get CORS origins for production
    print("\nCORS Origins (comma-separated URLs for production):")
    print("Examples: https://claude.ai,https://chatgpt.com")
    cors_origins = input("CORS Origins [*]: ").strip()
    if not cors_origins:
        cors_origins = "*"

    # Create .env content
    env_content = f"""# CustomGPT MCP Server Configuration
# Generated by setup.py on {datetime.now().isoformat()}

# API Settings
CUSTOMGPT_API_BASE={api_base}
API_VERSION=v1

# Server Settings
HOST={host}
PORT={port}
DEBUG={debug}

# CORS Settings
CORS_ORIGINS={cors_origins}

# Security Settings
API_KEY_MASK_CHARS=4

# Rate Limiting (adjust based on your needs)
DEFAULT_REQUESTS_PER_MINUTE=60
DEFAULT_REQUESTS_PER_HOUR=1000
DEFAULT_REQUESTS_PER_DAY=10000

# Caching
CACHE_TTL_SECONDS=300
MEMORY_CACHE_SIZE=1000

# Analytics
ANALYTICS_RETENTION_DAYS=90
ENABLE_ANALYTICS=true

# Webhooks
WEBHOOK_TIMEOUT_SECONDS=30
WEBHOOK_RETRY_COUNT=3

# Add your CustomGPT API key here for testing:
# CUSTOMGPT_API_KEY=your_api_key_here
"""

    try:
        with open(".env", "w") as f:
            f.write(env_content)
        print("✅ .env file created")
        print("\n⚠️  Remember to add your CustomGPT API key to the .env file!")
        return True
    except Exception as e:
        print(f"❌ Failed to create .env file: {e}")
        return False

def test_server():
    """Test if the server starts correctly."""
    venv_python = get_venv_python()

    print("\n🧪 Testing server startup...")

    try:
        # Try to import the main modules
        result = subprocess.run([
            venv_python, "-c",
            "import sys; sys.path.insert(0, '.'); from server import main; print('✅ Server modules load correctly')"
        ], capture_output=True, text=True, timeout=10)

        if result.returncode == 0:
            print("✅ Server startup test passed")
            return True
        else:
            print("❌ Server startup test failed:")
            print(result.stderr)
            return False

    except subprocess.TimeoutExpired:
        print("❌ Server startup test timed out")
        return False
    except Exception as e:
        print(f"❌ Server startup test error: {e}")
        return False

def print_next_steps():
    """Print next steps for the user."""
    print("\n🎉 Setup Complete!")
    print("=" * 50)
    print()
    print("📋 Next Steps:")
    print("1. Add your CustomGPT API key to .env file")
    print("2. Test locally: python server.py")
    print("3. Deploy to your chosen platform:")
    print("   • Railway: railway up")
    print("   • Vercel: vercel --prod")
    print("   • Docker: docker-compose up -d")
    print()
    print("📚 Documentation:")
    print("• README.md - Complete usage guide")
    print("• DEPLOYMENT.md - Deployment instructions")
    print("• CONTRIBUTING.md - Development guidelines")
    print()
    print("🔗 URLs after deployment:")
    print("• Railway: https://your-app.railway.app")
    print("• Vercel: https://your-project.vercel.app/mcp")
    print("• Local: http://localhost:8000")
    print()
    print("🆘 Need help? Visit: https://docs.customgpt.ai/mcp")

def main():
    """Main setup function."""
    print_header()

    # Check system requirements
    check_python_version()

    if not check_dependencies():
        print("\n❌ Missing required dependencies. Please install them and run setup again.")
        sys.exit(1)

    # Setup steps
    steps = [
        ("🔨 Virtual Environment", setup_virtual_environment),
        ("📦 Dependencies", install_dependencies),
        ("🔧 Configuration", create_env_file),
        ("🧪 Server Test", test_server)
    ]

    for step_name, step_func in steps:
        print(f"\n{step_name}")
        print("-" * 30)
        if not step_func():
            print(f"\n❌ Setup failed at: {step_name}")
            sys.exit(1)

    print_next_steps()

if __name__ == "__main__":
    from datetime import datetime
    main()